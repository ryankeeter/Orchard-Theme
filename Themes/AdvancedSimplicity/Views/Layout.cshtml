@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    Style.Include("1140.css");
    Style.Include("Site.css");
	Style.Include("MediaQueries.css");
    Style.Include("Buttons.css");
    Style.Include("http://fonts.googleapis.com/css?family=PT+Sans:400,700");
    
    /*Fancy Header Include*/
    Style.Include("http://fonts.googleapis.com/css?family=Pacifico");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.User.Add(New.User(), "3"); // Login and dashboard links


    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement
<div id="layout-header-container">
    <header id="layout-header" class="row"> 
        <div id="header" class="eightcol">
            @Zone(Model.Header)             
        </div>
        <div id="search" class="fourcol last">
            @Zone(Model.Search)
        </div>
</header>
</div>
@if (Model.Featured != null)
{
    <div id="layout-featured" class="row">
        @Zone(Model.Featured)
    </div>
}
@if (Model.BeforeMain != null)
{
    <div id="layout-before-main" class="row">
        @Zone(Model.BeforeMain)
    </div>
}
<div id="layout-main-container">
    <div id="layout-main" class="row">
        <aside id="aside-first" class="threecol">
                <div id="layout-navigation">
                    @Zone(Model.Navigation)
                </div>
            @Zone(Model.AsideFirst)
        </aside>
        @if (Model.AsideSecond != null)
        {
            <div id="layout-content" class="sixcol">
                @if (Model.Messages != null)
                {
                    <div id="messages">
                        @Zone(Model.Messages)
                    </div>
                }
                @if (Model.BeforeContent != null)
                {
                    <div id="before-content">
                        @Zone(Model.BeforeContent)
                    </div>
                }
                @if (Model.Content != null)
                {
                    <div id="content">
                        @Zone(Model.Content)
                    </div>
                }
                @if (Model.AfterContent != null)
                {
                    <div id="after-content">
                        @Zone(Model.AfterContent)
                    </div>
                }
            </div>
            
            <aside id="aside-second" class="threecol last">
                @Zone(Model.AsideSecond)
            </aside>
        }
        else
        {
            <div id="layout-content" class="ninecol last">
                @if (Model.Messages != null)
                {
                    <div id="messages">
                        @Zone(Model.Messages)
                    </div>
                }
                @if (Model.BeforeContent != null)
                {
                    <div id="before-content">
                        @Zone(Model.BeforeContent)
                    </div>
                }
                @if (Model.Content != null)
                {
                    <div id="content">
                        @Zone(Model.Content)
                    </div>
                }
                @if (Model.AfterContent != null)
                {
                    <div id="after-content">
                        @Zone(Model.AfterContent)
                    </div>
                }
            </div>
        }
    </div>
</div>
@if (Model.AfterMain != null)
{
    <div id="layout-after-main" class="row">
        @Zone(Model.AfterMain)
    </div>
}
@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
{
    <div id="layout-tripel-container">
        <div id="layout-tripel" class="row">@* as in beer *@
            @if (Model.TripelFirst != null)
            {
                <div id="tripel-first" class="fourcol">
                    @Zone(Model.TripelFirst)
                </div>
            }
            @if (Model.TripelSecond != null)
            {
                <div id="tripel-second" class="fourcol">
                    @Zone(Model.TripelSecond)
                </div>
            }
            @if (Model.TripelThird != null)
            {
                <div id="tripel-third" class="fourcol last">
                    @Zone(Model.TripelThird)
                </div>
            }
        </div>
    </div>
}
<div id="layout-footer-container">
    <div id="layout-footer" class="row">
        <footer id="footer">       
        @if (Model.Footer != null)
        {
            <div id="footer-sig" class="eightcol">
                @Zone(Model.Footer)
            </div>
            
            <div id="footer-user" class="fourcol last">
                @Zone(Model.User)
            </div>
        }
    </footer>
    </div>
</div>
@tag.EndElement
